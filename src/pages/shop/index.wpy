<template>
  <div class="page_tab_h" style="display: flex;overflow: hidden;">
    <div style="background: #fafafa; height: 700px">
      <van-sidebar v-model="activeKey" bind:change="onChange">
        <van-sidebar-item v-for="sideBarItem in sideBarList" :title="sideBarItem.title" :badge="sideBarItem.badge"/>
      </van-sidebar>
    </div>
    <scroll-view scroll-y style="height: 700px" scroll-into-view="{{toView}}" bindscroll="scrollTo">
      <div v-for="sideBarItem in sideBarList">
        <div :id="sideBarItem.type">
          <div class="item-title">
            {{sideBarItem.title}}
          </div>
          <div>
            <repeat wx:for="{{sideBarItem.items}}" wx:key="id" wx:for-index="index" wx:for-item="shopItem">
              <van-card
                price="{{ shopItem.price }}"
                title="{{ shopItem.title }}"
                thumb="{{ baseUrl }}{{ shopItem.thumb }}"
                num="{{ shopItem.count }}"
              >
                <view slot="footer">
                  <van-button size="mini" round icon="plus" data-index="{{shopItem._id}}" bind:click="plus"></van-button>
                  <van-button size="mini" round icon="minus" data-index="{{shopItem._id}}"
                              bind:click="minus"></van-button>
                </view>
              </van-card>
            </repeat>
          </div>
        </div>
      </div>
    </scroll-view>
    <view>
      <view>
        <van-submit-bar
          price="{{ totalPrice }}"
          button-text="查看购物车"
          bind:submit="listSelectedItem"
          disabled="{{ disableSubmit }}"
        />
      </view>
      <van-action-sheet show="{{ isShopCarShow }}" title="已选商品" bind:close="submitBarClose" cancel-text="提交" @cancel="navigateToOrder">
        <div style="max-height: 400px; overflow-y:scroll">
        <repeat wx:for="{{selectedGoods}}" wx:key="index" wx:for-index="index" wx:for-item="shopItem">
          <van-card
            price="{{ shopItem.price }}"
            title="{{ shopItem. title }}"
            thumb="{{ baseUrl }}{{ shopItem.thumb }}"
            num="{{ shopItem.count }}"
          >
            <view slot="footer">
              <van-button size="mini" round icon="plus" data-index="{{shopItem._id}}" bind:click="plus"></van-button>
              <van-button size="mini" round icon="minus" data-index="{{shopItem._id}}" bind:click="minus"></van-button>
            </view>
          </van-card>
        </repeat>
        </div>
      </van-action-sheet>
    </view>
  </div>
</template>

<script>
  import wepy from '@wepy/core'
  import eventHub from '../../common/eventHub'
  import { baseUrl } from '../../common/constant.js'
  import { getAllCommodity } from '../../api/commodity'
  import _ from 'lodash'

  wepy.page({
    data: {
      baseUrl,
      activeKey: 0,
      itemBoxHeight: 0,
      toView: 'drinks',
      top0: 0,
      top1: 0,
      top2: 0,
      drinkGoods: null,
      snacksGoods: null,
      sideBarList: [{
        title: '饮料',
        type: 'drinks',
        badge: '',
        items: []
      }, {
        title: '零食',
        type: 'snacks',
        badge: '',
        items: []
      }, {
        title: '生活用品',
        badge: '',
        type: 'daily',
        items: []
      }],
      isShopCarShow: false
    },
    computed: {
      selectedGoods: function () {
        let selectedItems = []
        if (this.sideBarList && this.sideBarList[0].items) {
          this.sideBarList.forEach(list => {
            let items = list.items
            if (!items) {
              return true
            }
            let currentItems = items.filter((item) => item.count > 0)
            if (!_.isEmpty(currentItems)) {
              selectedItems.push.apply(selectedItems, currentItems)
            }
          })
          return selectedItems
        } else {
          return []
        }
      },
      totalPrice: function () {
        let total = 0
        // exists one goods in bar, default drink always not null
        if (this.sideBarList && this.sideBarList[0].items) {
          this.sideBarList.forEach(list => {
            let items = list.items
            if (!items) {
              return true
            }
            let currentItems = items.filter((item) => item.count > 0)
            if (!_.isEmpty(currentItems)) {
              let totalOfThisType = currentItems.filter((item) => item.count > 0)
                .map((item) => item.count * item.price)
                .reduce((prev, curr) => (prev + curr)) * 100
              total += totalOfThisType
            }
          })
        } else {
          total = 0
        }
        this.$app.$options.globalData.order.totalPrice = total
        return total
      },
      disableSubmit: function () {
        for (const list of this.sideBarList) {
          const items = list.items
          const hasGoodsInCar = items && items.some((item) => item.count > 0)
          if (hasGoodsInCar) {
            return false
          }
        }
        return true
      }
    },
    watch: {
      selectedGoods () {
        let query = wx.createSelectorQuery();
        query.select('#drinks').boundingClientRect()
      }
    },
    onReady() {
      const token = wx.getStorageSync('token')
      if (!token) {
        this.$redirect('../auth/index')
      }
      const systemConfig = wx.getSystemInfoSync()
      this.itemBoxHeight = systemConfig.windowHeight - 50

    },
    onLoad() {
      eventHub.$on('clearCart', () => {
        this.sideBarList && this.sideBarList.forEach(list => {
          let items = list.items
          if (items && items.length > 0) {
            items.forEach(item => item.count = 0)
          }
        })
        this.$app.$options.globalData.order.totalPrice = 0
        this.$app.$options.globalData.order.products = []
      })
    },
    async onShow() {
      let query = wx.createSelectorQuery()
      query.select('#drinks').boundingClientRect()
      query.select('#snacks').boundingClientRect()
      query.select('#daily').boundingClientRect()
      query.exec((res) => {
        this.top0 = res[0].top
        this.top1 = res[1].top
        this.top2 = res[2].top
      })
    },
    created() {
      this.getSideBarList()
    },
    methods: {
      plus: function (e) {
        const id = e.currentTarget.dataset.index
        this.sideBarList.forEach(list => {
          let items = list.items
          if (!items) {
            return true
          }
          let currentItem = items.find((item) => item._id === id)
          if (currentItem) {
            currentItem.count++
            return false
          }
        })
      },
      minus: function (e) {
        const id = e.currentTarget.dataset.index
        this.sideBarList.forEach(list => {
          let items = list.items
          if (!items) {
            return true
          }
          let currentItem = items.find((item) => item._id === id)
          if (currentItem && currentItem.count > 0) {
            items.find((item) => item._id === id).count--
            return false
          }
        })
      },
      onChange(e) {
        this.toView = this.sideBarList[e.$wx.detail].type
      },
      scrollTo(e) {
        let scrollTop = e.$wx.detail.scrollTop + 23  // 滚动的Y轴
        if (scrollTop >= this.top2) {
          this.activeKey = 2
        } else if (scrollTop >= this.top1) {
          this.activeKey = 1
        } else {
          this.activeKey = 0
        }
      },
      navigateToOrder() {
        if (this.selectedGoods.length > 0) {
          this.$app.$options.globalData.order.products = this.selectedGoods
          this.submitBarClose()
          this.$navigate('../order/index')
        }
      },
      listSelectedItem: function () {
        this.isShopCarShow = true
      },
      submitBarClose: function () {
        this.isShopCarShow = false
      },
      async getSideBarList() {
        let response = await getAllCommodity()
        let commodities = response.data.data
        for (let commodityKey in commodities) {
          commodities[commodityKey].count = 0
        }
        let drinks = commodities.filter((commodity) => commodity.category === 'drinks')
        let snacks = commodities.filter((commodity) => commodity.category === 'snacks')
        let daily = commodities.filter((commodity) => commodity.category === 'daily')
        this.sideBarList.find((sideBar) => sideBar.type === 'drinks').items = drinks
        this.sideBarList.find((sideBar) => sideBar.type === 'snacks').items = snacks
        this.sideBarList.find((sideBar) => sideBar.type === 'daily').items = daily
      }
    }
  })
</script>

<style>
  ::-webkit-scrollbar {
    display: none;
  }
</style>

<config>
  {
  "usingComponents": {
  "van-sidebar": "../../components/vant/sidebar/index",
  "van-sidebar-item": "../../components/vant/sidebar-item/index",
  "van-card": "../../components/vant/card/index",
  "van-icon": "../../components/vant/icon/index",
  "van-stepper": "../../components/vant/stepper/index",
  "van-button": "../../components/vant/button/index",
  "van-submit-bar": "../../components/vant/submit-bar/index",
  "van-action-sheet": "../../components/vant/action-sheet/index"
  }
  }
</config>

<style>
  .van-submit-bar {
    bottom: 50px !important;
  }

  .van-popup {
    bottom: 50px !important;
    overflow-y: hidden !important;

  }
  .van-button--danger {
    background: #b80d1b !important;
  }
  .view {
    border: none !important;
  }
  .van-action-sheet__cancel {
    background: #b80d1b !important;
    color: #ffffff !important;
  }
  .item-title {
    position: sticky;
    top: 0;
    width: 100%;
    background: #fafafa;
    font-size: 16px;
    line-height: 16px;
    font-weight: bolder;
    margin-left: 5px;
    padding-top: 5px;
  }
  @keyframes circle-draw {
    80% {
      stroke-dashoffset: 0;
    }
  }

</style>
