<template>
  <view class="page_tab_h">
    <repeat wx:for="{{orderListModel}}" wx:key="orderNumber" wx:for-index="orderNumber" wx:for-item="order">
      <van-cell icon="null" label="{{ order.createDateTime }}"
                is-link
                bind:click="showOrderDetail"
                data-orderNumber ="{{order.orderNumber}}"
                data-orderStatus = "{{order.orderStatus}}"
      >
        <view slot="title">
          <view class="van-cell-text">Order: {{ order.orderNumber }}</view>
          <van-tag v-bind:type="order.stautsTag.type">{{ order.stautsTag.text }}</van-tag>
        </view>
      </van-cell>
    </repeat>

    <van-dialog
      title="order: {{ selectedOrderNumber }}"
      show="{{ isShowOrderDetailDialog }}"
      message="{{ orderDetailString }}"
      show-cancel-button
      bind:close="closeOrderDetail"
      bind:confirm="completeOrder"
      showConfirmButton="{{ isShowDialogConfirmButton }}"
    />
    <order-comment :show="showPop" @close="onClose"></order-comment>
    <van-toast id="van-toast" />
  </view>
</template>

<script>
import wepy from '@wepy/core'
import { goTarget, getCarReachStatus } from '../../api/car'
import { getAllOrders, updateOrder } from '../../api/order'
import _ from 'lodash'

wepy.page({
  data: {
    isShowOrderDetailDialog: false,
    intervalId: 0,
    orderList: [],
    selectedOrderNumber: null,
    isShowDialogConfirmButton: false,
    showPop: false
  },
  computed: {
    orderDetailString: function() {
      const order = this.orderList.find(n => n.orderNumber === this.selectedOrderNumber)
      const shopItemList = order ? order.products : []
      if (shopItemList && shopItemList.length > 0) {
        return shopItemList.reduce((accumulator, item) => accumulator + `${item.title} x ${item.count}\n`, '')
      } else {
        return ''
      }
    },
    orderListModel: function() {
      const statusMap = new Map([
        ['pending', {type: 'default', text: 'Pending'}],
        ['processing', {type: 'warning', text: 'Processing'}],
        ['reached', {type: 'primary', text: 'Car Reached'}],
        ['completed', {type: 'success', text: 'Completed'}],
        ['error', {type: 'danger', text: 'Error'}]
      ]);
      let model = this.orderList
      model.forEach((order) => {
        order.stautsTag = statusMap.get(order.orderStatus) || {type: 'danger', text: 'Unknown'}
      })
      return model
    }
  },
  methods: {
    showOrderDetail: function(e) {
      const { ordernumber, orderstatus } = e.currentTarget.dataset
      console.log(e.currentTarget.dataset)
      this.selectedOrderNumber = ordernumber
      this.isShowDialogConfirmButton = orderstatus === 'reached'
      this.isShowOrderDetailDialog = true
    },
    completeOrder: function() {
      this.showPop = true
      this.autoCompleteOrder()
    },
    autoCompleteOrder: function() {
      let currentOrder = this.orderList.find(order => order.orderNumber === this.selectedOrderNumber)
      const cloneOrder = _.cloneDeep(currentOrder)
      cloneOrder.orderStatus = 'completed'
      cloneOrder.completeDateTime = new Date().getTime()
      updateOrder(cloneOrder).then((res) => {
        _.assign(currentOrder, res.data)
        this.isShowOrderDetailDialog = false
        this.isShowDialogConfirmButton = false
        goTarget(this.$app.$options.globalData.homePose)
      })
    },
    closeOrderDetail: function() {
      this.isShowOrderDetailDialog = false
    },
    getOrderHistory() {
      const openid = wx.getStorageSync('openid')
      console.log(openid)
      return getAllOrders({openid}).then((res) => {
        this.orderList = res.data.map(item => {
          return {
            orderNumber: item._id,
            orderStatus: item.orderStatus,
            createDateTime: item.createDateTime,
            completeDateTime: item.completeDateTime,
            products: item.products,
            address: item.address
          }
        })
      }).catch((e) => {
        console.log(e)
      })
    },
    onClose: function() {
      this.showPop = false
    }
  },
  onShow() {
    this.getOrderHistory()
    getCurrentPages().pop().getTabBar().setData({
      active: this.$app.$options.globalData.currentTabIndex
    })
    this.intervalId = setInterval(() => { this.getOrderHistory() }, 1000)
  },
  onHide() {
    clearInterval(this.intervalId)
  }
})
</script>

<config>
{
"usingComponents": {
"van-cell": "../../components/vant/cell/index",
"van-tag": "../../components/vant/tag/index",
"van-icon": "../../components/vant/icon/index",
"van-button": "../../components/vant/button/index",
"van-dialog": "../../components/vant/dialog/index",
"van-toast": "../../components/vant/toast/index",
"order-comment": "../../components/order-complete/complete-popup/index"
}
}
</config>

<style>
</style>
