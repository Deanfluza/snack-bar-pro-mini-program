<template>
  <view class="page_tab_h">
    <repeat wx:for="{{orderListModel}}" wx:key="orderNumber" wx:for-index="orderNumber" wx:for-item="order">
      <van-cell icon="null" label="{{ order.createDateTime }}"
                is-link
                bind:click="showOrderDetail"
                data-orderNumber ="{{order.orderNumber}}"
      >

        <view slot="title">
          <view class="van-cell-text">Order: {{ order.orderNumber }}</view>
          <van-tag v-bind:type="order.stautsTag.type">{{ order.stautsTag.text }}</van-tag>
        </view>
      </van-cell>
    </repeat>

    <van-dialog
      title="order: {{ selectedOrderNumber }}"
      show="{{ isShowOrderDetailDialog }}"
      message="{{ orderDetailString }}"
      show-cancel-button
      bind:close="closeOrderDetail"
      bind:confirm="completeOrder"
      showConfirmButton="{{ isShowDialogConfirmButton }}"
    />
    <order-comment :show="showPop" @close="onClose"></order-comment>
    <van-toast id="van-toast" />
  </view>
</template>

<script>
import wepy from '@wepy/core'
import { goTarget, getCarReachStatus } from '../../api/car'

wepy.page({
  data: {
    isShowOrderDetailDialog: false,
    intervalId: 0,
    orderList: [],
    selectedOrderNumber: null,
    isShowDialogConfirmButton: false,
    showPop: false
  },
  computed: {
    orderDetailString: function() {
      const shopItemList = this.getOrderDetail(this.selectedOrderNumber)
      if (shopItemList && shopItemList.length > 0) {
        return shopItemList.reduce((accumulator, item) => accumulator + `${item.title} x ${item.count}\n`, '')
      } else {
        return ''
      }
    },
    orderListModel: function() {
      let model = this.orderList
      model.forEach((order) => {
        if (order.orderStatus === 'processing') {
          order.stautsTag = {
            type: 'warning',
            text: 'Processing'
          }
        } else if (order.orderStatus === 'reached') {
          order.stautsTag = {
            type: 'primary',
            text: 'Car Reached'
          }
        } else if (order.orderStatus === 'completed') {
          order.stautsTag = {
            type: 'success',
            text: 'Completed'
          }
        }
      })
      return model
    },
    currentOrderNumber: function() {
      if (this.orderList && this.orderList.length > 0) {
        const order = this.orderList.find((order) => order.orderStatus !== 'completed')
        return order ? order.orderNumber : ''
      } else {
        return ''
      }
    }
  },
  methods: {
    showOrderDetail: function(e) {
      this.selectedOrderNumber = e.currentTarget.dataset.ordernumber
      if (this.selectedOrderNumber === this.currentOrderNumber &&
        this.orderList.find((order) => order.orderNumber === this.currentOrderNumber).orderStatus === 'reached') {
        this.isShowDialogConfirmButton = true
      } else {
        this.isShowDialogConfirmButton = false
      }
      this.isShowOrderDetailDialog = true
    },
    completeOrder: function() {
      this.showPop = true
      this.autoCompleteOrder()
    },
    autoCompleteOrder: function() {
      this.orderList.find(order => order.orderNumber === this.currentOrderNumber).orderStatus = 'completed'
      this.isShowOrderDetailDialog = false
      this.isShowDialogConfirmButton = false
      goTarget(this.$app.$options.globalData.homePose)
    },
    reachedEvent: function() {
      clearInterval(this.intervalId)
      let currentOrder = this.orderList.find((order) => order.orderNumber === this.currentOrderNumber)
      currentOrder.orderStatus = 'reached'
      this.isShowDialogConfirmButton = true
      setTimeout(() => {
        if (currentOrder.orderStatus === 'reached') {
          this.autoCompleteOrder()
        }
      }, 60000)
    },
    closeOrderDetail: function() {
      this.isShowOrderDetailDialog = false
    },
    getOrderHistory: function() {
      return [
        {
          orderNumber: '1',
          orderStatus: 'processing',
          createDateTime: '2020-12-27T18:24:00',
          completeDateTime: ''
        },
        {
          orderNumber: '2',
          orderStatus: 'completed',
          createDateTime: '2020-12-25T16:24:00',
          completeDateTime: '2020-12-25T16:34:00'
        }
      ]
    },
    getOrderDetail: function(orderNumber) {
      const orderList = {
        '1': [
          {
            price: 3.50,
            title: '雪碧',
            desc: '有糖的',
            thumb: '/static/image/shopItemImage/sprite.jpg',
            count: 1
          },
          {
            price: 3.50,
            title: '可口可乐',
            desc: '有糖的',
            thumb: '/static/image/shopItemImage/coco.jpg',
            count: 1
          }
        ],
        '2': [
          {
            price: 3.50,
            title: '雪碧',
            desc: '有糖的',
            thumb: '/static/image/shopItemImage/sprite.jpg',
            count: 2
          }
        ]
      }
      return orderList[orderNumber]
    },
    onClose: function() {
      this.showPop = false
    }
  },
  onLoad() {
    this.orderList = this.getOrderHistory()
    this.intervalId = setInterval(() => {
      getCarReachStatus()
        .then((res) => {
          const isReached = res.data.reached
          if (isReached) {
            this.reachedEvent()
          }
        })
        .catch((error) => {
          console.log(error)
        })
    }, 1000)
  },
  onShow() {
    getCurrentPages().pop().getTabBar().setData({
      active: this.$app.$options.globalData.currentTabIndex
    })
  }
})
</script>

<config>
{
"usingComponents": {
"van-cell": "../../components/vant/cell/index",
"van-tag": "../../components/vant/tag/index",
"van-icon": "../../components/vant/icon/index",
"van-button": "../../components/vant/button/index",
"van-dialog": "../../components/vant/dialog/index",
"van-toast": "../../components/vant/toast/index",
"order-comment": "../../components/order-complete/complete-popup/index"
}
}
</config>

<style>
</style>
